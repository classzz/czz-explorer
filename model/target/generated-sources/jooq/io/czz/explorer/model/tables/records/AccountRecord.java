/*
 * This file is generated by jOOQ.
*/
package io.czz.explorer.model.tables.records;


import io.czz.explorer.model.tables.Account;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record8<ULong, String, Double, Timestamp, Timestamp, Integer, Double, Double> {

    private static final long serialVersionUID = -64992537;

    /**
     * Setter for <code>czztmp.account.id</code>.
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>czztmp.account.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>czztmp.account.address</code>.
     */
    public void setAddress(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>czztmp.account.address</code>.
     */
    public String getAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>czztmp.account.balance</code>.
     */
    public void setBalance(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>czztmp.account.balance</code>.
     */
    public Double getBalance() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>czztmp.account.created_time</code>.
     */
    public void setCreatedTime(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>czztmp.account.created_time</code>.
     */
    public Timestamp getCreatedTime() {
        return (Timestamp) get(3);
    }

    /**
     * Setter for <code>czztmp.account.updated_time</code>.
     */
    public void setUpdatedTime(Timestamp value) {
        set(4, value);
    }

    /**
     * Getter for <code>czztmp.account.updated_time</code>.
     */
    public Timestamp getUpdatedTime() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>czztmp.account.tx_count</code>.
     */
    public void setTxCount(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>czztmp.account.tx_count</code>.
     */
    public Integer getTxCount() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>czztmp.account.total_input</code>.
     */
    public void setTotalInput(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>czztmp.account.total_input</code>.
     */
    public Double getTotalInput() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>czztmp.account.total_output</code>.
     */
    public void setTotalOutput(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>czztmp.account.total_output</code>.
     */
    public Double getTotalOutput() {
        return (Double) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<ULong, String, Double, Timestamp, Timestamp, Integer, Double, Double> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<ULong, String, Double, Timestamp, Timestamp, Integer, Double, Double> valuesRow() {
        return (Row8) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field1() {
        return Account.ACCOUNT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field3() {
        return Account.ACCOUNT.BALANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return Account.ACCOUNT.CREATED_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field5() {
        return Account.ACCOUNT.UPDATED_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Account.ACCOUNT.TX_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field7() {
        return Account.ACCOUNT.TOTAL_INPUT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field8() {
        return Account.ACCOUNT.TOTAL_OUTPUT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAddress();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value3() {
        return getBalance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getCreatedTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value5() {
        return getUpdatedTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getTxCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value7() {
        return getTotalInput();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value8() {
        return getTotalOutput();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value1(ULong value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value2(String value) {
        setAddress(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value3(Double value) {
        setBalance(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value4(Timestamp value) {
        setCreatedTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value5(Timestamp value) {
        setUpdatedTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value6(Integer value) {
        setTxCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value7(Double value) {
        setTotalInput(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value8(Double value) {
        setTotalOutput(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord values(ULong value1, String value2, Double value3, Timestamp value4, Timestamp value5, Integer value6, Double value7, Double value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(ULong id, String address, Double balance, Timestamp createdTime, Timestamp updatedTime, Integer txCount, Double totalInput, Double totalOutput) {
        super(Account.ACCOUNT);

        set(0, id);
        set(1, address);
        set(2, balance);
        set(3, createdTime);
        set(4, updatedTime);
        set(5, txCount);
        set(6, totalInput);
        set(7, totalOutput);
    }
}
